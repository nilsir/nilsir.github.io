<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git配置备份(别名)]]></title>
    <url>%2F2019%2F01%2F07%2Fgit-config-backup%2F</url>
    <content type="text"><![CDATA[备份我自己的git常用别名 配置文件路径:~/.gitconfig 1234567891011[user] name = nilsir email = nilsir@qq.com[alias] st = status co = checkout br = branch unstage = reset HEAD last = log -1 ci = commit lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit]]></content>
      <categories>
        <category>gitconfig</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>config</tag>
        <tag>backup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu下安装shadowsocks]]></title>
    <url>%2F2018%2F10%2F20%2Finstall-shadowsocks%2F</url>
    <content type="text"><![CDATA[在ubuntu下安装shadowsocks, 亲测可用 安装1$ sudo apt-get install shadowsocks 配置12345678910$ touch ~/sslocal/shadowsocks.json$ vim ~/sslocal/shadowsocks.json&#123;"server":"**","server_port":"**","local_port":"1080","password":"*","timeout":"600","method":"chacha20-ietf-poly1305"&#125; 启动1$ sslocal -c ~/sslocal/shadowsocks.json]]></content>
      <categories>
        <category>shadowsocks</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>install</tag>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu16.04安装gitlab]]></title>
    <url>%2F2018%2F10%2F19%2Finstall-gitlab%2F</url>
    <content type="text"><![CDATA[在ubuntu下安装gitlab, 亲测可…用 安装1$ su - 1$ env | grep lc -i 1$ sudo apt-get update 1$ sudo apt-get install -y curl openssh-server ca-certificates 1$ curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash 1$ sudo EXTERNAL_URL="http://gitlab.example.com" apt-get install gitlab-ce` 配置1$ gitlab-rails console 1$ u=User.where(id:1).first 1u.password = 'YOUR_PASSWORD' 1u.password_confirmation = 'YOUR_PASSWORD' 1u.save! 1exit]]></content>
      <categories>
        <category>gitlab</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>gitlab</tag>
        <tag>install</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php生成无限级分类数据]]></title>
    <url>%2F2018%2F09%2F29%2Fget-tree%2F</url>
    <content type="text"><![CDATA[php生成树结构数据1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?php$array = [ ['id' =&gt; 1, 'pid' =&gt; 0, 'name' =&gt; '河北省'], ['id' =&gt; 2, 'pid' =&gt; 0, 'name' =&gt; '北京市'], ['id' =&gt; 3, 'pid' =&gt; 1, 'name' =&gt; '邯郸市'], ['id' =&gt; 4, 'pid' =&gt; 2, 'name' =&gt; '朝阳区'], ['id' =&gt; 5, 'pid' =&gt; 2, 'name' =&gt; '通州区'], ['id' =&gt; 6, 'pid' =&gt; 4, 'name' =&gt; '望京'], ['id' =&gt; 7, 'pid' =&gt; 4, 'name' =&gt; '酒仙桥'], ['id' =&gt; 8, 'pid' =&gt; 3, 'name' =&gt; '永年区'], ['id' =&gt; 9, 'pid' =&gt; 1, 'name' =&gt; '武安市'],];function getTree($array, $pid = 0, $level = 0)&#123; //声明静态数组, 避免递归调用时, 多次声明导致数组覆盖 static $list = []; foreach ($array as $key =&gt; $value) &#123; //找到父节点为根节点的节点 也就是pid=0的节点 if ($value['pid'] == $pid) &#123; //父节点为根节点的节点, 级别为0, 也就是第一级 $value['level'] = $level; $value['name'] = str_repeat('--', $value['level']) . $value['name']; //把数组放到list中 $list[] = $value; //把这个节点从数组中移除, 减少后续递归消耗 unset($array[$key]); //开始递归,查找父ID为该节点ID的节点, 级别则为原级别+1 getTree($array, $value['id'], $level + 1); &#125; &#125; return $list;&#125;$array = getTree($array);var_dump($array);]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>nested sets</tag>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php常用排序算法]]></title>
    <url>%2F2018%2F09%2F29%2Fsort%2F</url>
    <content type="text"><![CDATA[php常用的四种排序算法, $arr = [43, 54, 72, 21, 66, 1, 32, 55, 11, 78, 36, 76, 39, 88]; 冒泡排序123456789101112131415function bubbleSort($arr)&#123; $len = count($arr); for ($i = 1; $i &lt; $len; $i++) &#123; for ($k = 0; $k &lt; $len - $i; $k++) &#123; if ($arr[$k] &gt; $arr[$k + 1]) &#123; $tmp = $arr[$k + 1]; $arr[$k + 1] = $arr[$k]; $arr[$k] = $tmp; &#125; &#125; &#125; return $arr;&#125; 快速排序12345678910111213141516171819202122232425function quickSort($arr)&#123; if (count($arr) &gt; 1) &#123; //获取一个用于分割的关键字，一般是首个元素 $mid = $arr[0]; $leftArray = []; $rightArray = []; $size = count($arr); for ($i = 1; $i &lt; $size; $i++) &#123; if ($arr[$i] &lt; $mid) &#123; //把比$mid小的数放到一个数组里 $leftArray[] = $arr[$i]; &#125; elseif ($arr[$i] &gt; $mid) &#123; //把比$mid大的数放到另一个数组里 $rightArray[] = $arr[$i]; &#125; &#125; $leftArray = quickSort($leftArray); $rightArray = quickSort($rightArray); return array_merge($leftArray, [$mid], $rightArray); &#125; else &#123; return $arr; &#125;&#125; 选择排序1234567891011121314151617181920212223242526function selectSort($arr)&#123; //双重循环完成，外层控制轮数，内层控制比较次数 $len = count($arr); for ($i = 0; $i &lt; $len - 1; $i++) &#123; //先假设最小的值的位置 $p = $i; for ($j = $i + 1; $j &lt; $len; $j++) &#123; //$arr[$p] 是当前已知的最小值 if ($arr[$p] &gt; $arr[$j]) &#123; //比较，发现更小的,记录下最小值的位置；并且在下次比较时采用已知的最小值进行比较。 $p = $j; &#125; &#125; //已经确定了当前的最小值的位置，保存到$p中。如果发现最小值的位置与当前假设的位置$i不同，则位置互换即可。 if ($p != $i) &#123; $tmp = $arr[$p]; $arr[$p] = $arr[$i]; $arr[$i] = $tmp; &#125; &#125; //返回最终结果 return $arr;&#125; 插入排序123456789101112131415161718192021222324252627function insertSort($arr)&#123; //插入排序法 $len = count($arr); for ($i = 1; $i &lt; $len; $i++) &#123; //获得当前需要比较的元素值。 $tmp = $arr[$i]; //内层循环控制 比较 并 插入 for ($j = $i - 1; $j &gt;= 0; $j--) &#123; //$arr[$i];//需要插入的元素;$arr[$j];//需要比较的元素 if ($tmp &lt; $arr[$j]) &#123; //发现插入的元素要小,交换位置 //将后边的元素与前面的元素互换 $arr[$j + 1] = $arr[$j]; //将前面的数设置为当前需要交换的数 $arr[$j] = $tmp; &#125; else &#123; //如果碰到不需要移动的元素 //由于是已经排序好是数组, 则前面的就不需要再次比较了 break; &#125; &#125; &#125; //将这个元素插入到已经排序好的序列内 //返回 return $arr;&#125;]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[fibonacci算法]]></title>
    <url>%2F2018%2F09%2F29%2Ffibonacci%2F</url>
    <content type="text"><![CDATA[求斐波那契有递归算法和非递归算法, 下边是两种算法的实现 非递归算法123456789101112131415161718function fibonacci($n)&#123; if ($n &lt;= 0) &#123; throw new \Exception('your input must &gt; 0'); &#125; if ($n == 1 || $n == 2) &#123; return 1; &#125; $arr[1] = $arr[2] = 1; for ($i = 3; $i &lt;= $n; $i++) &#123; $arr[$i] = $arr[$i - 1] + $arr[$i - 2]; &#125; return $arr[$n];&#125; 递归算法123456789101112function fibonacci($n)&#123; if ($n &lt;= 0) &#123; throw new \Exception('your input must &gt; 0'); &#125; if ($n == 1 || $n == 2) &#123; return 1; &#125; return fibonacci($n - 1) + fibonacci($n - 2);&#125;]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>fibonacci</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu下composer安装]]></title>
    <url>%2F2018%2F09%2F28%2Fubuntu-composer-install%2F</url>
    <content type="text"><![CDATA[下载1$ sudo curl -sS https://getcomposer.org/installer | php 移动1$ sudo mv composer.phar /usr/local/bin/composer 修改权限1$ sudo chmod +x /usr/local/bin/composer 检测安装123composer --version# Composer version 1.7.2 2018-08-16 16:57:12# 如果出现版本信息, 那么证明安装成功]]></content>
      <categories>
        <category>composer</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>install</tag>
        <tag>composer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vscode配置备份]]></title>
    <url>%2F2018%2F09%2F21%2Fvscode-config-backup%2F</url>
    <content type="text"><![CDATA[vscode配置备份 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102&#123; "files.autoSave": "afterDelay", "workbench.colorTheme": "One Dark Pro", "workbench.iconTheme": "vscode-icons", "workbench.activityBar.visible": false, "workbench.statusBar.visible": false, "explorer.openEditors.visible": 0, "editor.fontFamily": "Fira Code,Operator Mono", "editor.fontLigatures": true, "editor.fontSize": 16, "editor.cursorStyle": "line", "editor.lineHeight": 24, "editor.lineNumbers": "on", "editor.minimap.enabled": false, "editor.rulers": [120], "editor.quickSuggestions": &#123; "other": true, "comments": true, "strings": true &#125;, "editor.tabCompletion": true, "files.trimTrailingWhitespace": true, "files.insertFinalNewline": true, "files.trimFinalNewlines": true, "gitlens.advanced.messages": &#123; "suppressShowKeyBindingsNotice": true &#125;, // sync start "sync.gist": "f6399f42bacbdf8a07bdfb82b6f37494", "sync.host": "", "sync.pathPrefix": "", "sync.quietSync": false, "sync.askGistName": false, "sync.removeExtensions": true, "sync.syncExtensions": true, "sync.autoDownload": false, "sync.autoUpload": false, "sync.lastUpload": "2018-08-15T09:07:37.428Z", "sync.lastDownload": "", "sync.forceDownload": false, //sync end //php-cs-fixer start "php-cs-fixer.executablePath": "/usr/local/bin/php-cs-fixer", "php-cs-fixer.onsave": false, "php-cs-fixer.rules": "@PSR2", "php-cs-fixer.config": ".php_cs;.php_cs.dist", "php-cs-fixer.allowRisky": false, "php-cs-fixer.pathMode": "override", "php-cs-fixer.exclude": [], "php-cs-fixer.autoFixByBracket": true, "php-cs-fixer.autoFixBySemicolon": false, "php-cs-fixer.formatHtml": false, "php-cs-fixer.documentFormattingProvider": true, //php-cs-fixer end "guides.enabled": false, "telemetry.enableTelemetry": false, "telemetry.enableCrashReporter": false, "extensions.closeExtensionDetailsOnViewChange": true, "extensions.showRecommendationsOnlyOnDemand": true, "debug.allowBreakpointsEverywhere": true, "window.openFilesInNewWindow": "on", "importCost.typescriptExtensions": [ "\\.vue$" ], "eslint.validate": [ "javascript", "javascriptreact", "vue", "vue-html", &#123; "language": "vue", "autoFix": true &#125; ], "eslint.options": &#123; "plugins": ["vue"] &#125;, "eslint.run": "onSave", "breadcrumbs.enabled": false, "files.exclude": &#123; "**/.git": true, "**/.svn": true, "**/.hg": true, "**/CVS": true, "**/.DS_Store": true, "**/.idea": true &#125;, "terminal.external.osxExec": "iTerm.app", "php-docblocker.author": &#123; "name": "nilsir", "email": "nilsir@qq.com" &#125;, "blade.format.enable": true, "php.executablePath": "/usr/local/bin/php", "github.hosts": [ &#123; "host": "https://github.com", "username": "oauth", "token": "system" &#125; ],&#125;]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>config</tag>
        <tag>backup</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim配置备份]]></title>
    <url>%2F2018%2F09%2F21%2Fvim-config-backup%2F</url>
    <content type="text"><![CDATA[zsh配置备份 1234567891011121314151617181920212223242526272829303132333435363738394041set nocompatiblesyntax oncolor draculaset t_CO=256set linespace=16set autowriteallset tabstop=8set expandtabset softtabstop=4set shiftwidth=4set backspace=indent,eol,startset numberset showmodeset showcmdset mouse=aset encoding=utf-8filetype indent onset autoindentset cursorlineset textwidth=120set wrapset linebreakset wrapmargin=2set scrolloff=5set sidescrolloff=15set laststatus=2set rulerset showmatchset hlsearchset incsearchset ignorecaseset smartcaseset spell spelllang=en_usset autochdirset noerrorbellsset visualbellset autoreadset listchars=tab:»■,trail:■set listset wildmenuset wildmode=longest:list,full]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>config</tag>
        <tag>backup</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zsh配置备份]]></title>
    <url>%2F2018%2F09%2F21%2Fzsh-config-backup%2F</url>
    <content type="text"><![CDATA[zsh配置备份 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109# If you come from bash you might have to change your $PATH.# export PATH=$HOME/bin:/usr/local/bin:$PATH# Path to your oh-my-zsh installation.export ZSH=/Users/nilsir/.oh-my-zsh# Set name of the theme to load. Optionally, if you set this to "random"# it'll load a random theme each time that oh-my-zsh is loaded.# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes#ZSH_THEME="robbyrussell"#ZSH_THEME="agnoster"ZSH_THEME="cloud"# Set list of themes to load# Setting this variable when ZSH_THEME=random# cause zsh load theme from this variable instead of# looking in ~/.oh-my-zsh/themes/# An empty array have no effect# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )# Uncomment the following line to use case-sensitive completion.# CASE_SENSITIVE="true"# Uncomment the following line to use hyphen-insensitive completion. Case# sensitive completion must be off. _ and - will be interchangeable.# HYPHEN_INSENSITIVE="true"# Uncomment the following line to disable bi-weekly auto-update checks.# DISABLE_AUTO_UPDATE="true"# Uncomment the following line to change how often to auto-update (in days).# export UPDATE_ZSH_DAYS=13# Uncomment the following line to disable colors in ls.# DISABLE_LS_COLORS="true"# Uncomment the following line to disable auto-setting terminal title.# DISABLE_AUTO_TITLE="true"# Uncomment the following line to enable command auto-correction.# ENABLE_CORRECTION="true"# Uncomment the following line to display red dots whilst waiting for completion.# COMPLETION_WAITING_DOTS="true"# Uncomment the following line if you want to disable marking untracked files# under VCS as dirty. This makes repository status check for large repositories# much, much faster.# DISABLE_UNTRACKED_FILES_DIRTY="true"# Uncomment the following line if you want to change the command execution time# stamp shown in the history command output.# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"# HIST_STAMPS="mm/dd/yyyy"# Would you like to use another custom folder than $ZSH/custom?# ZSH_CUSTOM=/path/to/new-custom-folder# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/# Example format: plugins=(rails git textmate ruby lighthouse)# Add wisely, as too many plugins slow down shell startup.plugins=( git zsh-autosuggestions zsh-syntax-highlighting z extract)source $ZSH/oh-my-zsh.sh# User configuration# export MANPATH="/usr/local/man:$MANPATH"# You may need to manually set your language environment# export LANG=en_US.UTF-8# Preferred editor for local and remote sessions# if [[ -n $SSH_CONNECTION ]]; then# export EDITOR='vim'# else# export EDITOR='mvim'# fi# Compilation flags# export ARCHFLAGS="-arch x86_64"# ssh# export SSH_KEY_PATH="~/.ssh/rsa_id"# Set personal aliases, overriding those provided by oh-my-zsh libs,# plugins, and themes. Aliases can be placed here, though oh-my-zsh# users are encouraged to define aliases within the ZSH_CUSTOM folder.# For a full list of active aliases, run `alias`.## Example aliases# alias zshconfig="mate ~/.zshrc"# alias ohmyzsh="mate ~/.oh-my-zsh"export PATH="/usr/local/opt/mysql@5.7/bin:$PATH"export GO_INSTALL_DIR=$HOMEexport GOPATH=$HOME/goexport GOROOT=/usr/local/goexport PATH=$HOME/go/bin:$PATHexport PATH=$HOME/.composer/vendor/bin:$PATHexport NVM_DIR="$HOME/.nvm"[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; \. "$NVM_DIR/nvm.sh" # This loads nvm[ -s "$NVM_DIR/bash_completion" ] &amp;&amp; \. "$NVM_DIR/bash_completion" # This loads nvm bash_completionalias cat=ccatnah='git reset --hard;git clean -df' 其他123456$ cd $HOME$ touch .hushlogin# 关闭上次登录信息# You have to add DISABLE_AUTO_UPDATE="true" on your .zshrc before the source $ZSH/oh-my-zsh.sh line. By doing so, oh-my-zsh will just skip the update checking script.]]></content>
      <categories>
        <category>zsh</category>
      </categories>
      <tags>
        <tag>config</tag>
        <tag>backup</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS下安装pecl]]></title>
    <url>%2F2018%2F09%2F18%2Fmacos-install-pecl%2F</url>
    <content type="text"><![CDATA[macOS下安装pecl简介 PECL(The PHP Extension Community Library)是PHP扩展的存储库,为PHP所有的扩展提供提供托管和下载服务. 通过PEAR(PHP Extension and Application Repository)的Package Manager的安装管理方式,可以对 PECL 扩展进行下载和安装 安装官方提供了PEAR在各个平台的安装方式,直接看官方文档的请进传送门, macOS平台官方安装翻译如下 下载PEAR 1$ curl -O https://pear.php.net/go-pear.phar # 使用 curl 命令下载即可 安装PEAR 1$ sudo php -d detect_unicode=0 go-pear.phar # 使用 sudo 授权进行安装 安装过程需要进行简单的配置，如下： 12345678910111213141516171819202122Below is a suggested file layout for your new PEAR installation. Tochange individual locations, type the number in front of thedirectory. Type 'all' to change all of them or simply press Enter toaccept these locations. 1. Installation base ($prefix) : /usr 2. Temporary directory for processing : /tmp/pear/install 3. Temporary directory for downloads : /tmp/pear/install 4. Binaries directory : /usr/bin 5. PHP code directory ($php_dir) : /usr/share/pear 6. Documentation directory : /usr/docs 7. Data directory : /usr/data 8. User-modifiable configuration files directory : /usr/cfg 9. Public Web Files directory : /usr/www10. System manual pages directory : /usr/man11. Tests directory : /usr/tests12. Name of configuration file : /private/etc/pear.conf1-12, 'all' or Enter to continue: 1# 输入 1, 将安装根目录修改为 /usr/local/pear# 输入 4, 将命令安装到 /usr/local/bin 检测是否安装成功 12345$ pear versionPEAR Version: 1.10.5PHP Version: 7.1.7Zend Engine Version: 3.1.0# 如果正常显示上边的信息, 那么就说明安装成功了 通过pecl安装一个php扩展 1234567$ pecl install swoole #安装swoole扩展...# 安装完成之后, 查看php模块是否已经有该扩展$ php -m | grep swooleswoole # 如果出现结果, 那么说明该扩展安装成功 参考PECL官方地址PEAR官方地址]]></content>
      <categories>
        <category>pecl</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>install</tag>
        <tag>macos</tag>
        <tag>pecl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo从部署到自动发布]]></title>
    <url>%2F2018%2F09%2F08%2Finstall-hexo%2F</url>
    <content type="text"><![CDATA[hexo从部署到自动发布 很多时候我们想写一篇文章, 但是都止步在了环境部署上, 以致于写作的兴趣荡然无存, 使用hexo之后, 就可以随心所欲的写文章 系统安装 安装依赖Node.js, Git 安装hexo 1$ npm install -g hexo-cli 创建项目 123$ hexo init &lt;folder&gt; #初始化项目$ cd &lt;folder&gt; #切到项目目录$ npm install #安装项目依赖 系统配置12345678.├── _config.yml #系统配置文件├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 如何配置 启动服务 配置完成之后, 就可以启动服务(也可以先启动服务, 然后边查看效果, 边修改配置)1$ hexo server #启动服务器。默认情况下，访问网址为： http://localhost:4000/ 常用命令 主题安装安装nexT主题123$ cd hexo #切换到hexo 项目根目录$ mkdir themes/next #创建next主题目录$ curl -s https://api.github.com/repos/iissnan/hexo-theme-next/releases/latest | grep tarball_url | cut -d '"' -f 4 | wget -i - -O- | tar -zx -C themes/next --strip-components=1 #下载主题 主题配置 同配置系统 部署到githu 用git进行版本控制 推送到github 创建测试配置文件 配置token 配置travis-ci 推送代码到github进行ci测试参考地址]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>hexo</tag>
        <tag>npm</tag>
        <tag>github</tag>
        <tag>travis-ci</tag>
        <tag>ci</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php simpleXMLElement与array的相互转换]]></title>
    <url>%2F2018%2F09%2F05%2Fphp-xml-array%2F</url>
    <content type="text"><![CDATA[php simpleXMLElement与array的相互转换 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?phpfunction xmlToArray($simpleXmlElement)&#123; $simpleXmlElement=(array)$simpleXmlElement; foreach($simpleXmlElement as $k=&gt;$v)&#123; if($v instanceof SimpleXMLElement ||is_array($v))&#123; $simpleXmlElement[$k]=xmlToArray($v); &#125; &#125; return $simpleXmlElement;&#125;$simxml=simplexml_load_file('./01.xml');//print_r(xmlToArray($simxml));/* * 数组转化xml * parame 数组 * $node nodename 默认加在根节点 */function ArrayToxML($arr,$node='root')&#123; if($node=='root')&#123; $simpleXmlElemnet=new SimpleXMLElement('&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;root&gt;&lt;/root&gt;'); &#125;else&#123; $simpleXmlElemnet=$node; &#125; foreach($arr as $k=&gt;$v)&#123; if(is_array($v))&#123; ArrayToxML($v,$simpleXmlElemnet-&gt;addChild($k));//创建节点 并加在他的后面 &#125;else&#123; if(is_numeric($k))&#123; $simpleXmlElemnet-&gt;addChild('item',$v); &#125;else&#123; $simpleXmlElemnet-&gt;addChild($k,$v); &#125; &#125; &#125; return $simpleXmlElemnet;&#125;$arr=array('人'=&gt;'人民好','age'=&gt;26, 'job'=&gt;array('title'=&gt;'经理','salary'=&gt;44444, 'team'=&gt;array('小红','小狗','小张')));$xmlElement=ArrayToxML($arr);header('Content-Type:text/xml');echo $xmlElement-&gt;saveXML();]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>array</tag>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php二维数组排序---支持单条件或多条件]]></title>
    <url>%2F2018%2F09%2F05%2Fphp-array-sort%2F</url>
    <content type="text"><![CDATA[php二维数组排序—支持单条件或多条件可以查询array_multisort,以便更清楚的了解排序逻辑, 函数方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;?php/** *User: idoiwill *Email: xslt@idoiwill.com *Blog: http://blog.idoiwill.com *DateTime: 2017/5/19 12:51 *//** * @function 二维数组排序,支持多条件 * @param $array,待排序数组 * @param $sortRule,多条件排序规则 * @param string $order,单条件排序规则 * @return mixed */function arraySort($array,$sortRule,$order="asc")&#123; /** * $array = [ * ["book"=&gt;10,"version"=&gt;10], * ["book"=&gt;19,"version"=&gt;30], * ["book"=&gt;10,"version"=&gt;30], * ["book"=&gt;19,"version"=&gt;10], * ["book"=&gt;10,"version"=&gt;20], * ["book"=&gt;19,"version"=&gt;20] * ]; */ if(is_array($sortRule))&#123; /** * $sortRule = ['book'=&gt;"asc",'version'=&gt;"asc"]; 条件支持N多个 */ usort($array, function ($a, $b) use ($sortRule) &#123; foreach($sortRule as $sortKey =&gt; $order)&#123; if($a[$sortKey] == $b[$sortKey])&#123;continue;&#125; return (($order == 'desc')?-1:1) * (($a[$sortKey] &lt; $b[$sortKey]) ? -1 : 1); &#125; return 0; &#125;); &#125;else if(is_string($sortRule))&#123; /** * $sortRule = "book"; * $order = "asc"; */ usort($array,function ($a,$b) use ($sortRule,$order)&#123; if($a[$sortRule] == $b[$sortRule])&#123; return 0; &#125; return (($order == 'desc')?-1:1) * (($a[$sortRule] &lt; $b[$sortRule]) ? -1 : 1); &#125;); &#125; return $array;&#125; 函数使用1234567891011121314151617181920212223242526&lt;?php/** *User: idoiwill *Email: xslt@idoiwill.com *Blog: http://blog.idoiwill.com *DateTime: 2017/5/19 12:51 */$array = [ ["book"=&gt;10,"version"=&gt;10], ["book"=&gt;19,"version"=&gt;30], ["book"=&gt;10,"version"=&gt;30], ["book"=&gt;19,"version"=&gt;10], ["book"=&gt;10,"version"=&gt;20], ["book"=&gt;19,"version"=&gt;20]];//单条件$array = arraySort($array,'book','asc');var_dump[$array];//多条件arraySort($array,['book'=&gt;"asc",'version'=&gt;"asc"]);var_dump[$array];]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>array</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php中扩展两个数组函数]]></title>
    <url>%2F2018%2F09%2F05%2Fphp-array-ext%2F</url>
    <content type="text"><![CDATA[我们通常会去检测数组中是否存在某个元素,或者检测每个数组元素是否一致,为此扩展两个函数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485&lt;?php/** *User: idoiwill *Email: xslt@idoiwill.com *Blog: http://www.idoiwill.com *DateTime: 2017/1/19 16:35 *//** * Callable typehints are only supported in php &gt;= 5.4. * For PHP 5.3, remove callable typehint, use is_callable($callback) instead. *//** * 如果数组中每个元素的值都是$callback,返回true * @param callable $callback * @param array $arr * @return bool */function array_every(callable $callback, array $arr)&#123; foreach ($arr as $element) &#123; if (! $callback($element)) &#123; return false; &#125; &#125; return true;&#125;/** * 如果数组中存在$callback这个元素,返回true * @param callable $callback * @param array $arr * @return bool */function array_some(callable $callback, array $arr)&#123; foreach ($arr as $element) &#123; if ($callback($element)) &#123; return true; &#125; &#125; return false;&#125;/** * Example usage: */$all_foo = array('foo', 'foo', 'foo');$some_foo = array('foo', 'foo', 'bar');function is_foo($stringy)&#123; return $stringy == 'foo';&#125;function is_bar($stringy)&#123; return $stringy == 'bar';&#125;echo "Every \$all_foo element is 'foo': ";var_dump(array_every("is_foo", $all_foo));echo "Some \$all_foo element is 'foo': ";var_dump(array_some("is_foo", $all_foo));echo "\n";echo "Every \$all_foo element is 'bar': ";var_dump(array_every("is_bar", $all_foo));echo "Some \$all_foo element is 'bar': ";var_dump(array_some("is_bar", $all_foo));echo "\n";echo "Every \$some_foo element is 'foo': ";var_dump(array_every("is_foo", $some_foo));echo "Some \$some_foo element is 'foo': ";var_dump(array_some("is_foo", $some_foo));echo "\n";echo "Every \$some_foo element is 'bar': ";var_dump(array_every("is_bar", $some_foo));echo "Some \$some_foo element is 'bar': ";var_dump(array_some("is_bar", $some_foo));]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>array</tag>
      </tags>
  </entry>
</search>
